
Function Pointers
  - in addition to passing closures, you can also pass regular functions
  	to functions

  - functions coerce to the type `fn`, not to be confused with the
  	`Fn` closure trait

  - the `fn` type is called a function pointer


  - example of syntax for accepting a function pointer:

      fn add_one(x: i32) -> i32 {
	      x + 1
	  }

	  fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
	      f(arg) + f(arg)
	  }

	  fn main() {
	      let answer = do_twice(add_one, 5);
		  println!("The answer is {}", answer);
	  }

  - Unlike closures, fn is a type rather than a trait, so we specify
  	fn as the parameter type directly rather than declaring a generic
	type parameter with one of the Fn traits as a trait bound


  - Function pointers implement all three of the closure traits (Fn, FnMut,
  	and FnOnce), so you can always pass a function pointer as an argument
	for a function that expects a closure

	-- it's best to write functions using a generic type and one of
	   the closure traits so your functions can accept either
	   functions or closures


  - an example of where you would want to only accept `fn` and not closures
  	is when interfacing with external code that doesn't have closures
	-- C functions can accept functions as arguments, but C
	   doesn't have closures


  - a useful pattern to exploit an implementation detail of tuple structs
  	and tuple-struct enum variants: these types use () as initializer syntax,
	which looks like a function call
	-- the initializers are actually implemented as functions returning an
	   instance that's constructed from their arguments
	-- we can use these initializer functions as function pointers that
	   implement the closure traits, which means we can specify the
	   initializer functions as arguments for methods that take
	   closures, like so:


	     enum Status {
		     Value(u32),
			 Stop
		 }

		 let list_of_statuses: Vec<Status> = (0u32..20)
		 	 				   			   	 .map(Status::Value)
											 .collect();



Returning Closures
  - Closures are represented by traits, which means you can't return
  	closures directly

  - in most cases where you might want to return a trait, you can instead
  	use the concrete type that implements the trait as the return
	value of the function

  - but you can't do that with closures because they don't have a concrete
  	type that is returnable -> you're not allowed to use the function pointer
	fn as a return type, for example

  - closures are also different sizes that must be resolved at runtime,
  	therefore to return a closure we must use a trait object:

	  fn returns_closure() -> Box<dyn Fn(i32) -> i32> {
	      Box::new(|x| x + 1)
	  }

    
	


	   
