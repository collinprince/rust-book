
Unsafe Rust
  - Unsafe Rust exists because, by nature, static analysis is conservative
  - Another reason Rust has an unsafe version is that underlying
  	computer hardware is inherently unsafe


Unsafe Superpowers
  - to switch to unsafe Rust, use the unsafe keyword and then start
  	a new block that holds the unsafe code

  - You can take five actions in unsafe Rust, called unsafe superpowers:
    * Dereference a raw pointer
	* Call an unsafe function or method
	* Access or modify a mutable static variable
	* Implement an unsafe trait
	* Access fields of unions


  - unsafe doesn't turn off the borrow checker or disable any other
  	of Rust's safety checks: if you use a reference in unsafe code, it
 	will still be checked

  - the unsafe keyword only gives you access to these five features
  	that are then not checked by the compiler for memory safety
	-- you'll get some degree of safety inside an unsafe block


  - the intent behind unsafe is that as the programmer, you'll ensure the code
  	inside an unsafe block will access memory in a valid way

  - To isolate unsafe code as much as possible, it's best to enclose unsafe
  	code within a safe abstraction and provide a safe API

  - parts of the STL are implemented as safe abstractions over unsafe
  	code that has been audited


Dereferencing a Raw Pointer
  - Unsafe Rust ahs two new types called raw pointers that are similar
  	to references

  - as with references, raw pointers can be immutable or mutable and are
  	written as `*const T` and `*mut T`, respectively
	-- the asterisk isn't the dereference operator; it's part of
	   the type name

    -- in the context of raw pointers, immutable means that the pointer
	   can't be directly assigned to after being dereferenced

  - different from references and smart pointers, raw pointers:
  	* are allowed to ignore borrowing rules by having both immuatble
	  and mutable pointers or multiple mutable pointers to the same location
	* aren't guaranteed to point to valid memory
	* are allowed to be null
	* don't implement any automatic cleanup

  - example of how to create a raw pointer:

    let mut num = 5;

	let r1 = &num as *const i32;  // immutable raw pointer
	let r2 = &mut num as *mut i32; // mutable raw pointer


  - notice that in the above example, we can create raw pointers in
  	safe code; we just can't derefence raw pointers outside an unsafe
	block

  - we create raw pointers by using `as` to cast an immutable and a mutable
  	reference into their corresponding raw pointer types
	-- because we created them directly from references guaranteed
	   to be valid, we know these particular raw pointers are valid, but
	   we can't make that assumption about just any raw pointer


  - we can write (very unsafe/unpredictable) raw pointers which point to
  	arbitrary locations in memory
	-- example:

	   let address = 0x012345usize;
	   let r = address as *const i32;


  - we can create raw pointers in safe code, but we can't dereference raw
  	pointers and read the data being pointed to
	-- below, we use the dereference operator `*` on a raw pointer that
	   requires an unsafe block

	   let mut num = 5;

	   let r1 = &num as *const i32;
	   let r2 = &mut num as *mut i32;

	   unsafe {
	       println!("r1 is: {}", *r1);
		   println!("r2 is: {}", *r2);
	   }

  - creating a pointer does no harm -> it's only when we try to access
  	the value that it points at that we might end up dealing with an
	invalid value
	-- this unsafe code also creates a mutable and immutable raw pointer
	   to the same memory location -> this would not be allowed in safe
	   Rust using references


Calling an Unsafe Function or Method
  - the second type of operation that requires an unsafe block is calls to
  	unsafe functions

  - Unsafe functions and methods look exactly like regular functions and
  	methods, but they have an extra `unsafe` before the rest of the definition

  - the unsafe keyword in this context indicates the function has requirements
  	we need to uphold when we call this function, because Rust can't
	guarantee we've met these requirements

  - by calling an unsafe function within an unsafe block, we're saying
  	that we've read this function's documentation and take responsibility
	for upholding the function's contracts


  - example -> an unsafe function named dangerous that doesn't do anything:

    unsafe fn dangerous() {}

	unsafe {
	    dangerous();
	}
	

  - we must call unsafe functions in an unsafe block -> we will get a
  	compiler error if we do not


Creating a Safe Abstraction over Unsafe Code
  - just because a function contains unsafe code doesn't mean we need
  	to mark the entire function as unsafe
	-- wrapping safe code in a safe function is a common abstraction


  - example: split_at_mut
    -- this is an STL function which requires some unsafe code
	-- this safe method is defined on mutable slices: it takes one
	   slice and makes it two by splitting the slice at the index
	   given as an argument

    -- usage example:

	   let mut v = vec![1, 2, 3, 4, 5, 6];

	   let r = &mut v[..];

	   let (a, b) = r.split_at_mut(3);
	   assert_eq!(a, &mut [1, 2, 3]);
	   assert_eq!(b, &mut [4, 5, 6]);


    -- implementation example:

	   fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {
	       let len = slice.len();

		   assert!(mid <= len);
		   unsafe {
		       (
			       slice::from_raw_parts_mut(ptr, mid),
				   slice::from_raw_parts_mut(ptr.add(mid), len-mid)
			   )

           }
	   }

      * the length asssertion above guarantees that we will not incorrectly
	  	break up the slice, and therefore the slicing is actually safe
		through the guarantees ensured by the programmer

      * this function's return body has to be unsafe because it can't
	  	understand that we're borrowing different parts of the slice;
		it only knows that we're borrowing from the same slice twice
		-- borrowing different parts of a slice is fundamentally okay
		   because the two slices aren't overlapping, but Rust
		   isn't smart enough to know this

      * we have to use the unsafe function slice::from_raw_parts_mut
	  	in order to get these unsafe references
		-- slice::from_raw_parts_mut is unsafe because it takes
		   a raw pointer and must trust that the pointer is valid

		-- the add method on the raw pointer is also unsafe, because it
		   must trust that the offset location is also a valid pointer

      * we don't have to mark the resulting function unsafe, just the block
	  	within the function that uses unsafe code



Using extern Functions to Call External Code
  - sometimes Rust code might need to interact with code written in another
  	language

  - for this, Rust has a keyword, extern, that facilitates the creation
  	and use of a Foreign Function Interface (FFI)
	-- an FFI is a way for a programming language to define functions and
	   enable a different (foreign) programming language to call those functions


  - example: set up an integration with the abs function from the C STL

    extern "C" {
	    fn abs(input: i32) -> i32;
	}

	fn main() {
	    unsafe {
		    println!("Absolute value of -3 according to C: {}", abs(-3));
		}
	}

  - within the extern "C" block, we list the names and signatures of
  	external functions from another language we want to call
	-- the "C" part defines the ABI the external function uses: the ABI
	   defines how to call the function at the assembly level
	-- the "C" ABI is the most common and follows the C programming lanugage's
	   ABI


  - we can also use extern to create an interface that allows other languages
  	to call Rust functions


Accessing or Modifying a Mutable Static Variable
  - global variables: Rust supports them, but they can be problematic with
  	Rust's ownership rules
	-- if two threads are accessing the same mutable global variable, it can
	   cause a data race


  - In Rust, global variables are called static variables
    -- example:

	   static HELLO_WORLD: &str = "Hello, world!";

	   fn main() {
	       println!("name is: {}", HELLO_WORLD);
	   }

  - static variables can only store references with the 'static lifetime, which
  	means the Rust compiler can figure out the lifetime and we aren't required
	to annotate it explicitly
	-- accessing an immutable static variable is safe


  - another difference between constants and static variables is that static
  	variables can be mutable
	-- accessing and modifying mutable static variables is unsafe

    -- example:

	  static mut COUNTER: u32 = 0;

	  fn add_to_count(inc: u32) {
	      unsafe {
		      COUNTER += inc;			 
		  }
	  }

	  fn main() {
	      add_to_count(3);

		  unsafe {
		      println!("COUNTER: {}", COUNTER);
		  }
	  }


  - as with regular variables, we specify mutability using the mut keyword
    -- any code that reads or writes from COUNTER must be within an
	   unsafe block

    -- this code compiles and prints "COUNTER: 3" as we would expect because
	   it's single threaded -> having multiple threads access COUNTER would
	   likely result in data races


  - with mutable data that is globally acessible, it's difficult to ensure
  	there are no data races, which is why Rust considers mutable static
	variables to be unsafe
	-- where possible it's preferable to use the concurrency techniques
	   and thread-safe smart pointers discussed earlier



Implementing an Unsafe Trait
  - another use case for unsafe is implementing an unsafe trati
  - a trait is unsafe when at least one of the its methods has some invariant
  	that the compiler can't verify

  - we can declare a trait is unsafe by the adding the unsafe keyword
  	before trait and marking the implementation of the trait
	as unsafe too

	-- example:

	   unsafe Trait Foo {
	       // methods go here
	   }

	   unsafe impl Foo for i32 {
	       // method implementations go here
	   }

	   fn main() {}


  - by using `unsafe impl`, we're promising that we'll uphold the invariants
  	that the compiler can't verify


  - As an example, the Sync and Send traits from concurrency are unsafe
  	traits, which are implemented for standard data types and which
	the compiler will automatically implement for our own types if
	they are composed of Sync/Send implemented types as well


Accessing Fields of a Union
  - the final action that works only with unsafe is accessing fields of a union
  - unions are primarily used to interface with unions in C code
  
	


	   

 
