
Advanced Traits

Specifying Placeholder Types in Trait Definitions with Associated Types
  - associated types: connect a type placeholder with a trait such that
  	the trait method definitions can use these placeholder types in their
	signatures


  - the implementor of a trait will specify the concrete type to be used
  	in this type's place for the particular implementation
	-- that way, we can define a trait that uses some types without
	   needing to know exactly what those types are until the trait
	   is implemented


  - one example of a trait with an associated type is the Iterator trait
  	that the STL provides

	-- the associated type is named Item and stands in for the type of the
	   values the type implementing the Iterator trait is iterating over


    -- the definition of the Iterator is as follows:

	   pub trait Iterator {
	       type Item;

		   fn next(&mut self) -> Option<Self::Item>;
	   }


  - the type Item is a placeholder type, and the next method's definition shows
  	that it will return values of type Option<Self::Item>
	-- implementors of the Iterator trait will specify the concrete type
	   for Item, and the next method will return an Option containing
	   a vlaue of that concrete type


  - why use an associated type as opposed to a generic?

    -- to define the Iterator trait with generics instead of assoc. types we
	   would write:

	   pub trait Iterator<T> {
	       fn next(&mut self) -> Option<T>;
	   }

  - the difference is that when using generics, as above, we must annotate
  	the types in each implementation; because we can also implement
	`Iterator<String> for Counter` or any other type, we could have multiple
	implementations of Iterator for Counter
	-- in other words, when a trait has a generic parameter, it can be
	   implemented for a type multiple times, changing the concrete types
	   of the generic type parameters each time

    -- when we use the next method on Counter, we would have to provide
	   type annotations to indicate which implementation of Iterator we want
	   to use


  - With associated types, we don't need to annotate types because we
  	can't implement a trait on a type multiple times

  - in the `impl Iterator for Counter` example, we can only choose
  	what the type of Item will be once, because there can only be one
	`impl Iterator for Counter`

  - we don't have to specify that we want an iterator u32 values everywhere
  	when we call next on Counter


Default Generic Type Parameters and Operator Overloading
  - when we use generic type parameters, we can specify a default concrete
  	type for the generic type

  - this eliminates the need for implementors of the trait to specify a concrete
  	type if the default type works

  - the syntax for specifying a default type for a generic type is:
  	`<PlaceHoldertype=ConcreteType>` when declaring the generic type


  - A great exmaple of a situation where this technique is useful is with
  	operator overloading

  - Rust doesn't allow you to create your own operators or overload
  	arbitrary operators -> but you can overload the operations and
	corresponding traits listed in std::ops by implementing the traits
	associated with the operator


    -- example: overloading the + operator

	   use std::ops::Add;

	   #[derive(Debug, Copy, Clone, PartialEq)]
	   struct Point {
	       x: i32,
		   y: i32,
	   }

	   impl Add for Point {
	       type Output = Point;

		   fn add(self, other: Point) -> Point {
		       Point {
			       x: self.x + other.x,
				   y: self.y + other.y,
			   }
		   }
	   }

	   fn main() {
	       assert_eq!(
		       Point { x: 1, y: 0 } + Point { x: 2, y: 3 },
			   Point { x: 3, y: 3 }
		   );
	   }


  - the default generic type in this code is within the Add trait:

    trait Add<Rhs=Self> {
	    type Output;

		fn add(self, rhs: Rhs) -> Self::Output;
	}


  - in this definition, we specify that the default parameter add expects
  	on the Rhs will be of type Self, but we explicitly specify a different
	type that can be added on the rhs of the type that is implementing Add



  - this is called default type parameters
    -- when we implemented Add for Point, we used the default for Rhs because
	   we wanted to add two Point instances


  - we can specify something different for Rhs -> example:

    use std::ops::Add;

	struct Millimeters(u32);
	struct Meters(u32);

	impl Add<Meters> for Millimeters {
	    type Output = Millimeters;

		fn add(self, other: Meters) -> Millimeters {
		    Millimeters(self.0 + (other.0 * 1000))
		}
	}

  - you'll use default type parameters in two main ways:
    * to extend a type without breaking existing code
	* to allow customization in specific cases most users won't need

    -- the STL's Add trait is an example of the second purpose: usually, you'll
	   add two like types, but the Add trait provides the ability to customize
	   beyond that

    -- the first purpose is similar to the second but in reverse: if you want
	   to add a type parameter to an existing trait, you can give it a default
	   to allow extension of the functionality of the trait without breaking
	   the existing implementation code



Fully Qualified Syntax For Disambiguation: Calling Methods with the Same Name

  - nothing in Rust prevents a trait from having a method with the same
  	name as another trait's method, nor does Rust prevent you from implementing
	both traits on one type. It's also possible to implement a method directly
	on the type with the same name as methods from traits

  - example:

    trait Pilot { fn fly(&self); }
	trait Wizard { fn fly(&self); }

	struct Human;

	impl Pilot for Human {
	    fn fly(&self) { println!("This is your captain speaking."); }		
	}

    impl Wizard for Human {
	    fn fly(&self) { println!("Up!"); }
	}

    impl Human {
	    fn fly(&self) { println!("*waving arms furiously*"); }
	}

  - when we call fly on an instance of Human, the compiler defaults to calling
  	the method that is directly implemented on the type, as shown below:

	fn main() {
	    let person = Human;
		person.fly(); // will print "*waving arms furiously*"
	}

  - to call the specific trait implementations, we have to specify the trait
  	names:

	fn main() {
	    let person = Human;
		Pilot::fly(&person); // prints Pilot's fly
		Wizard::fly(&person); // prints Wizard's fly
		person.fly(); // print's Human's fly
	}

  - because the fly method takes a self parameter, if we had two types that
  	both implement one trait, Rust could figure out which implement of a
	trait to use based on the type of self

  - however, associated functions that are part of traits don't have a self
  	parameter -> when two types in the same scope implement that trait,
	Rust can't figure out which type you mean unless you use fully qualified
	syntax


    -- fully qualified syntax example:

	   trait Animal {
	       fn baby_name() -> String;
	   }

	   struct Dog;

	   impl Dog {
	       fn baby_name() -> String {
		       String::from("Spot")
		   }
	   }

	   impl Animal for Dog {
	       fn baby_name() -> String {
		       String::frmo("puppy")
		   }
	   }

	   fn main() {
	       println!("A baby dog is called a {}", Dog::baby_name()); // Spot
		   println!("A baby dog is called a {}", <Dog as Animal>::baby_name());
		   // the above will print puppy using fully qualified syntax
	   }


  - in general, fully qualified syntax is defined as follows:
  	` <Type as Trait>::function(receiver_if_method, next_arg, ...); `

    -- for associated functions, there would not be a receiver
	-- you could use fully qualified syntax everywhere that you call functions
	   or methods -> you're allowed to omit any part of this syntax that
	   Rust can figure out from other information in the program


Using Supertraits to Require One Trait's Functionality Within Another Trait
  - sometimes, you might need one trait to use another trait's functionality

  - in this case, you need to rely on the dependent trait also being implemented

  - the trait you rely on is a supertrait of the trait you're implementing


  - example: we're trying to define a trait for printing an outline
  	and want to use .to_string()

    use std::fmt;

	trait OutlinePrint: fmt::Display {
	    fn outline_print(&self) {
		    let output = self.to_string();
			let len = output.len();
			println!("...");
			...
		}
	}

  - we specify that OutlinePrint requires the Display trait, therefore
  	we can use the to_string function that is automatically implemented
	for any type that implements Display
	-- if we tried to use to_string without adding a colon and specifiying
	   the Display trait after the trait name, we'd get an error saying
	   that no method named to_string was found for the type &Self



Using the NewType Pattern to Implement External Traits on External Types
  - earlier, we mentioned the orphan rule that states we're allowed to implement
  	a trait on a type as long as either the trait or the type are local to our
	crate

  - it's possible to get around this restriction using the newtype pattern,
  	which involves creating a new type in a tuple struct
	-- the tuple struct will have one field and be a thin wrapper around
	   the type we want to implement a trait for
	-- then the wrapper type is local to our crate, and we can implement
	   the trait on the wrapper


  - Newtype is a term that originates from Haskell

  - there is no runtime performance penalty for using this pattern, and
  	the wrapper type is elided at compile time

  - example:

    use std::fmt;

	struct Wrapper(Vec<String>);

	impl fmt::Display for Wrapper {
	    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
		    write!(f, "[{}]", self.0.join(", "));
		}
	}

	fn main() {
	    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
		println!("w = {}", w);
	}

  - this example works and we avoid the orphan rule

  - downside: the new type doesn't have the methods of the value it's holding
  	-- if we wanted the new type to have every method the inner type has,
	   implementing the Deref trait on the Wrapper to return the inner
	   type would be a solution


    -- if we don't want the wrapper to have all the methods of the inner type,
	   we would have to implement just the methods we do want manually
	   
	
 

  


  
	   
	
  
	   
	
  
