
Structs
  - struct: a custom data type that lets you name and package together mutliple related values
  	that make up a meaningful group


Structs vs Tuples
  - structs are similar to tuples, as pieces of structs can be different types
  - structs are different from tuples because each piece of data in a struct is named
    -- as a result of these names, structs are more flexible than tuples: you don't have to rely
	   on the order of data to specify or access the values of an instance


Defining a Struct
  - to define a struct, we enter the keyword struct and name the entire struct, and then inside curly brackets,
  	we define the names and types of the pieces of data being grouped together, which we call *fields*

	example:
		struct User {
		    username: String,
			email: String,
   			sign_in_count: u64,
			active: bool,
		}


Using a Struct
  - to use a struct after we've defined it, we create an instance of that struct by specifying concrete values
  	for each of the fields
  - we create an instance by stating the name of the struct and then add curly brackets containing
  	key: value pairs, where the keys are the names of the fields and the values are the data we want
	to store in those fields.

  example:
    let user1 = User {
	  email: String::from("someone@example.com"),
	  username: String::from("someusername123"),
	  active: true,
	  sign_in_count: 1,
	};


  - to get a specific value from a struct, we can use dot notation
  - if the instance is mutable, we change a value by using the dot notation and assigning into a
  	particular field.

	example:
	  let mut user1 = User {
	    email: String::from("someone@example.com"),
	    username: String::from("someusername123"),
	    active: true,
	    sign_in_count: 1,
	  };
	  user1.email = String::from("anotheremail@example.com");

  - Note: the entire instance must be mutable -> Rust doesn't allow us to mark only certain fields
  	as mutable


Field Init Shorthand when Variables and Fields have the Same Name
  - when the variable names and the field names that we are assigning to in a struct have the same
  	name, we can omit writing out the "key: value" syntax and instead can just write the variable
	and it will automatically assign to the field of the same name in the struct

	example:
		fn build_user(email: String, username: String) -> User {
		  User {
		    email,
			username,
			active: true,
			sign_in_count: 1,
		  }
		}



Creating Instances From Other Instances with Struct Update Syntax
  - struct update syntax: creating a new instance of a struct that uses most of an old instance's values
  	but changes some

  - the syntax ".." specifies that the remaining fields not explicity set should have the
  	same value as the fields in the given instance

    example:
	  let user2 = User {
	  	  email: String::from("another@example.com"),
		  username: String::from("anotherusername567"),
		  ..user1
	  };

    -- this code creates a new instance which has unique values for email and username, but has the
	   same values as user1 for active & sign_in_count


Using Tuple Structs without Named Fields to Create Different Types
  - tuple structs: have the added meaning the struct name provides but do not have names associated
  		  		   with their fields

  - to define a tuple struct, start with the struct keyword and the struct name followed by the types
  	in the tuple

	example:
		struct Color(i32, i32, i32);
		struct Point(i32, i32, i32);

		let black = Color(0, 0, 0);
		let origin = Point(0, 0, 0);

  - black and origin values are different types, because they're instances of different tuple structs.
  	Each struct you define is its own type, even though the fields within the struct have
	the same types
	-- for example, a function that takes a parameter of type Color cannot take a Point
	   as an argument, even though both types are made up of three i32 values
	-- otherwise, tuple struct instances behave like tuples: you can destructure them into their
	   individual pieces, you can use a '.' followed by the index to access an individual value, and so on




Unit-Like Structs Without Any Fields
  - You can also define structs that don't have any fields
  - these are called unit-like structs because they behave similarly to (), the unit type
  - unit-like structs can be useful in situations in which you need to implement a trait on some type
  	but don't have any data that you want to store in the type itself




Ownership of Struct Data
  - in the User struct defn, we used the owned String type rather than the &str string slice type
    -> this is deliberate, we want the instance of a struct to own all of its data and for that data
	   to be valid as long as the entire struct is valid

  - it's possible for structs to store references to data owned by something else, but to do so
  	requires the use of lifetimes, a Rust feature that will be discussed later
	-- lifetimes ensure that the data referenced by a struct is valid for as long as the struct is
  	
  	
 
