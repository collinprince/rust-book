
Smart Pointers
  - smart pointers: data structures that not only act like a pointer but also have
  	additional metadata and capabilities
	-- smart pointers defined in the Rust STL provide functionality beyond that provided
	   by references
	   * ex: reference counting smart pointer type

  - an additional difference between references and smart pointers is that references are pointers
  	that only borrow data; in contrast, in many cases, smart pointers own the data they point to

  - examples of smart pointers: String, Vec<T>
  	-- both of these types count as smart pointers because they own some memory and allow you
	   to manipulate it
	-- they also have metadata (such as their capacity) and extra capabilities or guarantees
	   (such as with String ensuring its data will always be valid UTF-8)


  - Smart pointers are usually implemented using structs
    -- the characteristic that distinguishes a smart pointer from an ordinary struct is that
	   smart pointers implement the Deref and Drop traits

  - Deref trait: allows an instance of the smart pointer struct to behave like a reference
  	so you can write code that works with either references or smart pointers

  - Drop trait: allows you to customize the code that is run when an instance of the smart pointer
  	goes out of scope

  - Most common smart pointers in the STL:
  	* Box<T> : for allocating values on the heap
	* Rc<T>  : a reference counting type that enables multiple ownership
	* Ref<T> / RefMut<T> : accessed through RefCell<T>, a type that enforces the borrowing
	  rules at runtime instead of compile time

  - interior mutability pattern: where an immutable type exposes an API for mutating
  	an interior value

  - reference cycles: how they can leak memory and how to prevent them
