
Using Box<T> to Point to Data on the Heap
  - the most straightforward smart pointer is a box, whose type is written Box<T>

  - boxes allow you to store data on the heap rather than the stack

  - what remains on the stack is the pointer to the heap data

  - boxes don't have performance overhead, other than storing their data
  	on the heap instead of on the stack. But, they don't have many
	extra capabilities either

  - most common situations for box:
    * when you have a type whose size can't be known at compile time and you
	  want to use a value of that type in a context that requires
	  an exact size

	* when you have a large amount of data and you want to transfer ownership
	  but ensure the data won't be copied when you do so

    * when you want to own a value and you care only that it's a type that
	  implements a particular trait rather than being of a specific type



Using a Box<T> to Store Data on the Heap
  - example:
  	  fn main() {
	      let b = Box::new(5); // using a box to store an i32 value on the heap
		  println!("b = {}", b);
	  }

  - we can access data in the box similar to how we would if this data
  	were on the stack
	
  - when a box goes out of scope, as b does at the end of main, it will
  	be deallocated
	-- this deallocation happens for the box (stored on the stack) and the
	   data it points to (stored on the heap)


Enabling Recursive Types with Boxes
  - At compile time, Rust needs to know how much space a type takes up

  - One type whose size can't be known at compile time is a recursive type,
  	where a value can have as part of itself another value of the same type
	-- because this nesting of values could theoretically continue infinitely,
	   Rust doesn't know how much space a value of a recursive type needs

  - however, boxes have a known size, so by inserting a box in a recursive
  	type definition, you can have recursive types



Cons list
  - a cons list is a data structure that comes from the Lisp programming
  	language and its dialects

  - each item in a cons list contains two elements: the value of the current
  	item and the next item
	-- the last item in the list contains only a value called Nil without
	   a next item

  - a cons list is produced by recursively calling the cons function




Using Box<T> to Get a Recursive Type with a Known Size
  - when Rust is creating an enum type, it determines the size of the enum
  	by determining how much space is needed for the largest of the enum
	variants -> in the case of a recursize cons list, this is impossible
	since the list could be infinitely large


  - when we try to compile and use this enum and define a list:

      enum List {
	      Cons(i32, List),
		  Nil,
	  }

    we will get an error since the size cannot be determined, and the Rust
	compiler suggests to us that we insert some indirection


  - "indirection" means that instead of storing a value directly, we'll change
  	the data structure to store the value indirectly by storing a pointer to
	the value instead

  - Because a Box<T> is a pointer, Rust always knows how much space
  	a Box<T> needs: a pointer's size doesn't change based on the amount
	of data it's pointing to

  - we can redefine our example as follows which will compile:

      enum List {
	      Cons(i32, Box<List>),
		  Nil,
	  }

	  use crate::List::{Cons, Nil};

	  fn main() {
	      let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));
	  }


  - the Cons variant will need the size of an i32 plus the space to store
  	the box's pointer data

  - the Nil variant stores no values, so it needs less space than the Cons
  	variant

  - we now know that any List value will take up the size of an i32 plus
  	the size of a box's pointer data


  - Boxes provide only the indirection and heap allocation; they don't have
  	any other special capabilities, like those we'll see with the other smart
	pointer types

  - they also don't have any performance overhead that these special capabilities
  	incur, so they can be useful in cases like the cons list where the
	indirection is the only feature we need


  - Box<T> type is a smart pointer because it implements the Deref trait, which
  	allows Box<T> values to be treated like references

  - When a Box<T> value goes out of scope, the heap data that the box is
  	pointing to is cleaned up as well because of the Drop trait implementation
	   



	
