
Reference Cycles Can Leak Memory
  - Rust's memory safety guarantees make it difficult, but not impossible, to accidentally
  	create memory that is never cleaned up

  - We can see that Rust allows memory leaks by using Rc<T> and RefCell<T>: it's possible to
  	create references where items refer to each other in a cycle
	-- this creates memory leaks because the reference count of each item in the cycle will
	   never reach 0, and the values will never be dropped

  - creating reference cycles is not easily done, but it's not impossible either
  	-- if you have RefCell<T> values that contain Rc<T> values or similar nested combinations of types
	   with interior mutability and reference counting, you must ensure that you don't create cycles


  - another solution for avoid reference cycles is reorganizing your data structures so that some
  	references express ownership and some references don't
	-- as a result, you can have cycles made up of some ownership relationships and some non-ownership
	   relationships, and only the ownership relationships affect whether or not a value can be dropped


Preventing Reference Cycles: Turning an Rc<T> into a Weak<T>
  - calling Rc::clone increases the strong_count of an Rc<T> isntance
  - an Rc<T> instance is only cleaned up if its strong_count is 0

  - you can also create a weak reference to the value within an Rc<T> instance by calling
  	Rc::downgrade and passing a reference to the Rc<T>

  - when you call Rc::downgrade, you get a smart pointer of type Weak<T>
    -- instead of increasing the strong_count in the Rc<T> instance by 1, calling Rc::downgrade
	   increases the weak_count by 1

  - the Rc<T> type uses weak_count to keep track of how many Weak<T> references exist, similar
  	to strong_count, but weak_count doesn't need to be 0 for the Rc<T> instance to be cleaned up

  - strong references are how you can share ownership of Rc<T> instance

  - weak references don't express an ownership relationship
    -- they won't cause a reference cycle because any cycle involving some weak references will be
	   broken once the strong reference count of values involved is 0

  - Because the value that Weak<T> references might have been dropped, to do anything with the value
  	that a Weak<T> is pointing to, you must make sure the value still exists

	-- you do this by calling the upgrade method on a Weak<T> instance, which will return an Option<Rc<T>>
	   -- you'll get a result of Some if the Rc<T> value has not been dropped yet
	   -- you'll get a result of None if the Rc<T> value has been dropped

  - because upgrade returns an Option<Rc<T>>, Rust will ensure that the Some case and the
  	None case are handled, and there won't be an invalid pointer


Creating a Tree Data Structre: a Node with Child Nodes
  - example in 'tree' project


Summary
  - all of the logic that manages the counts and value dropping is built into Rc<T> and Weak<T> and their
  	implementations of the Drop trait
  
