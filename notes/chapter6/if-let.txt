

Concise Control Flow with if let
  - if let syntax lets you combine "if" and "let" into a less verbose way to handle values that
  	match one pattern while ignoring the rest

    example:

	  // this match code
	  let some_u8_value = Some(0u8);
	  match some_u8_value {
	      Some(3) => println!("three"),
		  _ => (),
	  }

	  // is equivalent to this if let code
      let some_u8_value = Some(0u8);
      if let Some(3) = some_u8_value {
	      println!("three");
      }

  - the syntax "if let" takes a pattern and an expression separated by an equal sign
    -- it works the same way as a match, where the expression is given to the match and the pattern
	   is its first arm

  - using if let means less typing/indendation/boilerplate code
  - However, you lose the exhaustive checking that match enforces
    -- choosing between "match" and "if let" depends on what you're doing in your particular situation
	   and whether gaining conciseness is an appropriate trade-off for losing exhaustive checking

  - "if let" is syntactic sugar for a match that runs code when the value matches one pattern and ignores
  	all other values

  - we can include an "else" with an "if let"
    -- the block of code that goes with the "else" is the same as the block of code that would go with
	   the _ case in the "match" expression that is equivalent to the "if let" and "else"

 	   example:

	     // match version
	     let mut count = 0;
		 match coin {
		     Coin::Quarter(state) => println!("State quarter from {:?}", state),
			 _ => count += 1,			 
		 }

		 // if let + else version
		 let mut count = 0;
		 if let Coin::Quarter(state) = coin {
		 	 println!("State quarter from {:?}!", state);
		 } else {
		     count += 1;   
		 }


  - if you have a situation in which your program has logic that is too verbose to express using a match,
  	remember that if let is in your Rust toolbox as well
		 
	   

