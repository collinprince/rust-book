

Fearless Concurrency
  - concurrent programming: where different parts of a program execute independently
  - parallel programming: where different parts of a program execute at the same time
  - in this text, problems will be referred to as concurrent rather than being more precise
  	and saying concurrent and/or parallel

  - handling concurrent programming safely and efficiently is one of Rust's major goals

  - Rust offers a variety of tools for modeling problems in whatever way is appropriate for your
  	situation and requirements

  - this chapter will cover:
  	* how to create threads to run multiple pieces of code at the same time
	* message-passing concurrency, where channels send messages between threads
	* shared-state concurrency, where multiple threads have access to some piece of data
	* the Sync and Send traits, which extend Rust's concurrency guarantees to user-defined
	  types as well as types provided by the standard library

