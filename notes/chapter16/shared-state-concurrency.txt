
Shared-State Concurrency
  - channels: similar to single ownership -> once you transfer a value down a channel,
  	you should no longer use that value
	
  - shared memory concurrency: similar to multiple ownership -> multiple threads can
  	access the same memory location at the same time


Using Mutexes to Allow Access to Data from One Thread at a Time
  - Mutex: abbreviation for mutual exclusion, a mutex allows only one thread
  	to access some data at any given time

  - to access the data in a mutex, a thread must first signal that it wants access
  	by asking to acquires the mutex's lock

  - lock: a data structure that is part of the mutex that keeps track of who currently
  	has exclusive access to the data
	-- the mutex is described as guarding the data it holds via the locking system


  - mutexes have a reputation for being difficult to use because you have to remember
  	two rules:
	  1. you must attempt to acquire the lock before using the data
	  2. when you're done with the data that the mutex guards, you must unlock
		 the data so other threads can acquire the lock


The API of Mutex<T>
  - example using mutex in a single threaded context:

      use std::sync::Mutex;

	  fn main() {
	      let m = Mutex::new(5);

		  {
		      let mut num = m.lock().unwrap();
			  *num = 6;
		  }

		  println!("m = {:?}", m);
	  }


  - as with many types, we create a Mutex<T> using the associated function new

  - to access the data inside the mutex, we use the 'lock' method to acquire the lock
  	-- this call will block the current thread so it can't do any work until it's
	   our turn to have the lock

  - the call to lock would fail if another thread holding the lock panicked
  	-- in that case, no one would ever be able to get the lock, so we've chosen to
	   unwrap and have this thread panic if we're in that situation

  - after we've acquired the lock, we can treat the return value, named num in this case,
  	as a mutable reference to the data inside
	-- the type system ensures that we acquire a lock before using the value in m:
	   Mutex<i32> isnot an i32, so we *must* acquire the lock to be able
	   to use the i32 value
	   
    -- we can't forget -> the type system won't let us access the inner i32 otherwise


  - Mutex<T> is a smart pointer
  	-- the call to 'lock' returns a smart pointer called MutexGuard, wrapped in a LockResult
	   that we handle with the call to unwrap

    -- the MutexGuard smart pointer implements Deref to point at our inner data
	-- the smart pointer also has a Drop implementation that releases the lock
	   automatically when a MutexGuard goes out of scope
	   * as a result, we don't risk forgetting to release the lock and blocking
	   	 the mutex from being used by other threads because the lock release hapens
		 automatically


Sharing a Mutex<T> Between Multiple Threads
  - As an example, we can create a counter variable to hold an i32 inside a Mutex<T>
  - we then create 10 threads using thread::spawn and gives all the threads the same
  	closure, one that moves the ocunter into the thread, acquires a lock on the Mutex<T>
	by calling the 'lock' method, and then adds 1 to the value in the mutex

Multiple Ownership with Multiple Threads
  - We can't simple move the same counter mutex into all of the threads -> a standard
  	Mutex<T> object can only be owned by a single thread

  - We can try wrapping our mutex in an Rc to create a reference counted object
  	that can have multiple owners -> this doesn't work because Rc is not safe to
	use in a concurrent context
	-- Rc<Mutex<i32>> cannot be sent between threads safely -> the trait `Send` is not
	   implemented for `Rc<Mutex<i32>>`
	-- Send is one of the traits that ensures the types we use with threads are
	   meant for use in concurrent situations

	-- Rc<T> does not implement atomic updates of its strong_count -> this makes it
	   unsafe to use in a concurrent context


Atomic Reference Counting with Arc<T>
  - Arc<T> is a type like Rc<T> that is safe to use in concurrent situations
  	-- the A in Arc stands for atomic, meaning it's an atomically reference counted type
	-- all primitive types aren't atomic because thread safety comes with a performance
	   penalty that you only want to pay when you really need to

  - Arc<T> and Rc<T> have the same API


Similarities Between RefCell<T>/Rc<T> and Mutex<T>/Arc<T>
  - the Mutex counter we used in the example is immutable but we could get a mutable
  	reference to the value inside it -> this means Mutex<T> provides interior mutability,
	as the Cell family does

  - in the same way we used RefCell<T> to allow us to mutate contents inside an Rc<T>,
  	we use Mutex<T> to mutate contents inside an Arc<T>

  - Rust can't protect you from all kinds of logic errors when you use Mutex<T>
  
  	-- using Rc<T> came with the risk of creating reference cycles, where two
	   Rc<T> values refer to each other, causing memory leaks

    -- Mutex<T> comes with the risk of creating deadlocks
	   * deadlocks occur when an operation needs to lock two resources and two
	   	 threads have each acquired one of the locks, causing them to wait for
		 each other forever
	

	
	   
  


  		   
