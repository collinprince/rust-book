
Extensible Concurrency with the Sync and Send Traits
  - the Rust *language* has very few concurrency features
  
  - almost every concurrency feature we've talked about so far in this chapter
  	has been part of the standard library, not the language

  - your options for handling concurrency are not limited to the language or the standard
  	library -> you can write your own concurrency features or use those written by
	others

  - 2 concurrency concepts are embedded in the language: std::marker traits 'Sync' and 'Send'



Allowing Transference of Ownership Between Threads with Send
  - the Send marker trait indicates that ownership of values of the type implementing
  	Send can be transferred between threads

  - Almsot every Rust type is 'Send', but there are some exceptions,
  	including Rc<T>: this cannot be 'Send' because if you cloned an Rc<T> value
	and tried to transfer ownership of the clone to another thread, both threads
	might update the reference count at the same time
	-- for this reason, Rc<T> is implemented for us in single-threaded situaitons
	   where you don't want to pay the thread-safe performance penalty

	-- Rust's type system and trait bounds ensure that you can never accidentally
	   send an Rc<T> or other non-'Send' type across threads unsafely


  - Any type composed entirely of 'Send' types is automatically marked as 'Send' as well
  	-- almost all primitive types are 'Send', aside from raw pointers


Allowing Access from Multiple Threads with Sync
  - The 'Sync' marker trait indicates that it is safe for the type implementing 'Sync'
  	to be referenced from multiple threads

  - In other words, any type T is 'Sync' if &T (an immutable reference to T) is 'Send',
  	meaning the reference can be sent safely to another thread

  - Similar to 'Send', primitive types are 'Sync', and types composed entirely of
  	types that are 'Sync' are also 'Sync'

  - the smart pointer Rc<T> is also not 'Sync' for the same reasons that it's not 'Send'
  	-- the RefCell<T> type and the family of related Cell<T> types are not 'Sync'
	   * the implementation of borrow checking that RefCell<T> does at
	   	 runtime is not thread-safe
	   * the smart pointer Mutex<T> is 'Sync' and can be used to shared access with
	   	 multiple threads


Implementing 'Send' and 'Sync' Manually Is Unsafe
  - because types that are made up of 'Send' and 'Sync' traits are automatically
  	also 'Send' and 'Sync', we don't have to implement those traits manually

	-- as marker traits, they don't even have any methods to implement
	-- they're just useful for enforcing invariants related to concurrency

  - manually implementing these traits involves implementing unsafe Rust code
    -- building new concurrent types not made up of 'Send' and 'Sync' parts requires
	   careful thought to uphold the safety guarantees



Summary 
  - since very little of how Rust handles concurrency is part of the language,
  	many concurrency solutions are implemented as crates

  - The Rust STL provides channels for message passing and smart pointer types,
  	such as Mutex<T> and Arc<T>, that are safe to use in concurrent contexts

  - The Rust type system and borrow checker ensures that it is more difficult and
  	easier to catch code that creates race conditions or invalid references

  	
