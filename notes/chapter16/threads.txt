
Using Threads to Run Code Simultaneously
  - process: an executed program's code is run in this, managed by OS
  - thread: independent parts that run simultaneously within your program

  - problems that arise due to threads:
  	* race conditions: threads are accessing data or resources in inconsistent order
	* deadlocks: two threads are waiting for each other to finish using a resource the
	  other thread has, preventing both threads from continuing
	* bugs that happen only in certain situations and are hard to reproduce and fix reliably


  - implementations of threads:
  	* 1:1 -> when a language calls the OS's APIs to create threads
	* green threads: programming language provided special implementation of threads
	  -- languages that use these green threads will execute them in the context of a different
	  	 number of OS threads
      -- the green-threaded model is called the M:N model -> there are M green threads per N OS threads,
	  	 where M and N are not necessarily the same number

  - each model of implementing threads has its own advantages and trade-offs, and the trade-off most
  	important to Rust is runtime support

  - in this context, by runtime we mean code that is included by the language in every binary
    -- this code can be large or small depending on the language, but every non-assembly language
	   will have some amount of runtime code

	-- when people say a language has "no runtime" -> they often mean "small runtime"

	-- smaller runtimes have fewer features but have the advantage of resulting in smaller binaries,
	   which make it easier to combine the language with other languages in more contexts

    -- although many languages are okay with increasing the runtime size in exchange for
	   more features, Rust needs to have nearly no runtime and cannot compromise on being able to
	   call into C to maintain performance


  - the green-threading M:N model requires a larger language runtime to manage threads
  	-- as such, the Rust STL only provides an implementation of 1:1 threading
	-- since Rust is such a low-level language, there are crates that implement M:N threading
	   if you would rather trade overhead for aspects such as more control over which threads run
	   when and lower costs of context switching, for example



Creating a New Thread with spawn
  - to create a new thread, we call the thread::spawn function and pass it a closure containing
  	the code we want to run in the new thread


Waiting for All Threads to Finish Using join Handles
  - we can fix the problem of the spawned thread not getting to run, or not getting to run completely,
  	by saving the return value of thread::spawn in a variable
	-- the return type of thread::spawn is JoinHandle

  - a JoinHandle is an owned value that, when we call the join method on it, will wait
  	for its thread to finish


  - calling join on the handle blocks the thread currently running until the thread represented by
  	the handle terminates

	-- Blocking a thread: that thread is prevented from performing work or exiting


Using move Closures with Threads
  - the move closure is often used alongside thread::spawn because it allows you to use data from one
  	thread in another thread
	-- this technique is especially useful when creating new threads in order to transfer ownership
	   of values from one thread to another


  - we cannot simply capture data from the outer scope within the closure like normal, as
  	there is a chance that this data will be dropped before the thread has been completed
	and then it may be referencing null data

	-- for example, trying to capture a vector v: Rust infers how to capture v, and because println!
	   only needs a reference to v, the closure tries to borrow v
	   * however, there's a problem: Rust can't tell how long the spawned thread will run,
	   	 so it doesn't know if the reference to v will always be valid


  - by adding the move keyword before the closure, we force the closure to take ownership
  	of the value it's using rather than allowing Rust to infer that it should borrow the values
	-- this also protects us from the scenario where the main thread might try to use the vector
	   after the move, as the compile time checks will prevent this code from compiling


  - the move keyword overrides Rust's conservative default of borrowing: it doesn't let us violate
  	the ownership rules



	
	  	 


