

Result Enum
  enum Result<T, E> {
      Ok(T),
	  Err(E),
  }

  - T: represents the type of value that will be returned in a success case within the Ok variant
  - E: represents the type of the error that will be returned in a failure case within the Err variant



Matching on Different Errors
  - we can match the Error type against different kinds of Errors in order to handle those errors
  	separately


  example code:
    let f = File::open("hello.txt");

	let f = match f {
	    Ok(file) => file,
		Err(error) => match error.kind() {
		    ErrorKind::NotFound => match File::create("hello.txt") {
			    Ok(fc) => fc,
				Err(e) => panic!("Problem creating the file {:?}", e),
			},
			other_error => {
			    panic!("Problem creating the file: {:?}", other_error)
			}			
		},
	};



Shortcuts for Panic on Error: unwrap and expect
  - unwrap: shortcut method implemented on Result<T, E> which will return the value inside the Ok if the
  	Result value is Ok, or will call the panic! macro if the Result is the Err variant

	example:
	  let f = File::open("hello.txt").unwrap();


  - method: similar to unwrap, but lets us also choose the panic! erorr message
    -- using expect instead of unwrap and providing good error messages can convey your intent and make
	   tracking down the source of a panic easier

	   example:
	     let f = File::open("hello.txt").expect("Failed to open hello.txt");




Propagating Errors
  - propagating error: instead of handling errors at every level, handle all lower-level errors
  	at some higher level layer -> propagate errors to higher level


A Shortcut for Propagating Errors: the ? Operator
  - example code:

  	  fn read_username_from_file() -> Result<String, io::Error> {
	      let mut f = File::open("hello.txt")?;
		  let mut s = String::new();
		  f.read_to_string(&mut s)?;
		  Ok(s)
	  }


  - ?:
    -- if the value of the Result is an Ok, the value inside the Ok will get returned from this expression,
  	   and the program will continue
    -- if the value of the Result is an Err, the Err will be returned from the whole function as if we had
	   used the return keyword so the error value gets propagated to the calling code

  - there is a difference between using manual matching and using ?:
    -- error values that have the ? operator called on them go through the from function,
	   defined in the From trait in the standard library, which is used to convert errors from one type
	   into another.

    -- when the ? operator calls the from function, the error type received is converted into the error
	   type defined in the return type of the current function
	   * this is useful when a function returns one error type to represent all the ways a function might fail,
	   	 even if parts might fail for many different reasons
	   * as long as each error type implements the from function to define how to convert itself to the
	   	 returned error type, the ? operator takes care of the conversion automatically


  - the ? operator eliminates a lot of boilerplate and makes this function's implementation simpler
    -- we can shorten the above code by chaining method calls immediately after the ?, as shown below:

	     fn read_username_from_file() -> Result<String, io::Error> {
		     let mut s = String::new();
			 File::open("hello.txt")?.read_to_string(&mut s)?;
			 Ok(s)
		 }


    -- we can actually make this function even shorter:

	   	 use std::fs;
		 use std::io;
	     fn read_username_from_file() -> Result<String, io::Error> {
		     fs::read_to_string("hello.txt")
		 }

    -- reading a file into a string is a fairly common operation which std::fs provides



The ? Operator Can Be Used in Functions that Return Result
  - When we use the ? operator, the return type of the function *must* be Result
    -- a compiler error will be thrown if we try to use ? in a function that does not return Result or Option
	   or another type that implements std::ops::Try



Return Types of main
  - the main function is special, and there are restrictions on what its return type must be
  - one valid return type for main is ()
  - another valid return type for main is Result<T, E>:

     fn main() -> Result<(), Box<dyn Error>> {
	     let f = File::open("hello.txt")?;
		 Ok(())
	 }

    -- Box<dyn Error> type is called a trait object
	   * For now, you can read Box<dyn Error> to mean "any kind of error"
	   * Using ? in a main function with this return type is allowed


