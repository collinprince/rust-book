
To panic! or Not to panic!
  - it is a good default to return a Result rather than to panic
    -- allows calling code to choose to panic or not and leaves the handling up to the caller as well



Examples, Prototype Code, and Tests
  - in examples, robust error-handling can make it harder to understand the example
  - in prototyping, unwrap and expect methods are very handy before you're ready to decide how to handle
  	errors
	-- they leave clear markers in your code for when you're ready to make your program more robust
  - in testing, if a method clall fails, you'd want the whole test to fail, even if that method isn't
  	the functionality under test
	-- Because panic! is how a test is marked as a failure, calling unwrap or expect is exactly what
	   should happen


Cases in Which You Have More Information Than the Compiler
  - It would also be appropriate to call unwrap when you have some other logic that ensures the Result
  	will have an Ok value, but the logic isn't something the compiler understands
	-- you'll still have a Result value to handle, but it's logically impossible that for the call
	   to fail in your situation

	   example:
	     use std::net::IpAddr;

		 let home: IpAddr = "127.0.0.1".parse().unwrap(); // logically impossible for parse to not return
		 	 	   		  								  // a Some(val) result for unwrap



Guidelines for Error Handling
  - It's advisable to have your code panic when it's possible that your code could end up in a bad state
    -- bad state: when some assumption, guarantee, contract, or invariant has been broken, such as when
	   invalid values, contradictory values, or missing values are passed to your code -- plus
	   one or more of the following:
	     * the bad state is not something that's expected to happen occasionally
		 * your code after this point needs to rely on not being in this bad state
		 * there's not a good way to encode this information in the types you use

  - Similarly, panic! is often appropriate if you're calling external code that is out of your control and it
  	returns an invalid state that you have no way of fixing

  - However, when a failure is expected, it's more appropriate to return a Result than to make a panic!
  	call

  - When your code performs operations on values, your code should verify the values are valid first
  	and panic if the values aren't valid
	-- example: functions often have contracts for which they guarantee they are valid, it would therefore
	   be ok to panic if the contract is not met for some reason (bad input for example)

  - Rust's compiler does a lot of type checking related work already to ensure that proper values
  	are given to functions, so this helps with cutting down on the amount of error handling
	you must handle yourself



Creating Custom Types for Validation
  - example: creating a Guess type for our number guessing game

  	code:
	  pub struct Guess {
	      value: i32,
	  }

	  impl Guess {
	      pub fn new(value: i32) -> Guess {
		      if value < 1 || value > 100 {
			      panic!("Guess value must be between 1 and 100, got {}.", value);
			  }
			  Guess { value }
		  }

		  // this is how write a getter for a private var in Rust
		  pub fn value(&self) -> i32 {
		      self.value
		  }		  
	  }
	  
	  



	
