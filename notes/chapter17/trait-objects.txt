
Using Trait Objecst that Allow for Values of Different Types
  - Example: creating a GUI library where we define a set of objects
  	that can be drawn on the screen

  - in a language with inheritance, we would create a base class
  	and then have the different obejcts we can draw inherit from this
	and implement their own draw method that overrides the default
	draw
	-- this is not an option in Rust -> instead we'll use traits

Defining a Trait for Common Behavior
  - to implement the behavior we want gui to have, we'll define a trait
  	named 'Draw' that will have one method named 'draw'

  - we can then define a vector that takes a *trait object*

  - trait object: points to both an instance of a type implementing our
  	specified trait as well as a table used to look up trait methods
	on that type at runtime

  - we create a trait object by specifying some sort of pointer, such as
  	a & reference or a Box<T> smart pointer, then the dyn keyword, and
	then specifying the relevant trait

  - we can use trait objects in place of a generic or concrete type


  - whenever we use a trait object, Rust's type system will ensure
  	at compile time that any value used in that context will implement
	the trait object's trait
	-- consequntly, we don't need to know all the possible types at compile
	   time


  - In Rust, we refrain from calling structs and enums "objects" to distinguish
  	them from other languages' objects
	-- in a struct or enum, the data in the struct fields and the behavior
	   in the impl blocks are separated

    -- in other languages, the data and behavior combined into one concept
	   is often labeled an object

  - However, trait objects *are* more like objects in other languages
  	in the sense that they combine data and behavior

  - BUT: trait objects differ from traditional objects in that we can't add
  	data to a trait object
	-- trait objects aren't as generally useful as objects in other languages:
	   * their specific purpose is to allow abstraction across common behavior


  - defining a trait:

    pub trait Draw {
	    fn draw(&self);
	}

  - defining a vector of the trait objects:

    pub struct Screen {
	    pub components: Vec<Box<dyn Draw>>,
	}

  - on the Screen struct, we'll define a method named run that will
  	call the draw method on each of its components:

	impl Screen {
	    pub fn run(&self) {
		    for component in self.components.iter() {
			    component.draw();
			}
		}
	}


  - this works differently from defining a struct that uses a generic type
  	parameter with trait bounds
	-- a generic type parameter can only be substituted with one concrete type
	   at at a time, whereas trait objects allow for multiple concrete types
	   to fill in for the trait object at runtime

 	-- if you'll only ever have homogenous collections, using generics and
	   trait bounds is preferable because the definitions will be monomorphized
	   at compile time to use the concrete types


Implementing the Trait
  - we can then implement the Draw trait for our own library structs and
  	a user can make their own structs that implement the Draw trait
	-- see gui crate for example

  - the concept -- of being concerned only with the messages a value responds
  	to rather than the value's concrete type -- is similar to
	the concept of duck typing in dynamically typed languages


  - the advantage of using trait objects and Rust's type system to write
  	code similar to code using duck typing is that we never have to check
	whether a value implements a particular method at runtime or
	worry about getting errors if a value doesn't implement a method but
	we call it anyway
	-- Rust won't compile our code if the values don't implement the traits
	   that the trait objects need
	   * if we try to use a type that doesn't implement a trait
	   	 where a trait object is expected, we will get a compile time
		 error


Trait Objects Perform Dynamic Dispatch
  - monomorphization process performed by the compiler when we use trait bounds
  	on generics: the compiler generates nongeneric implementations of functions
	and methods for each concrete type that we use in place of a generic type
	parameter
	-- the code that results from monomorphization is doing *static dispatch*,
	   which is when the compiler knows what method you're calling at compile
	   time

  - dynamic dispatch: when the compiler can't tell at compile time which
  	method you're calling
	-- in dynamic dispatch cases, the compiler emits code that at runtime
	   will figure out which method to call

  - when we use trait objects, Rust must use dynamic dispatch
  	-- at runtime, Rust uses the pointers inside the trait object
	   to know which method to call

  - there is a runtime cost when this lookup happens that doesn't occur
  	with static dispatch
	-- dynamic dispatch also prevents the compiler from choosing to inline
	   a method's code, which in turn prevents some optimizations

	-- this is the cost of the extra flexibility that trait objects enable



Object Safety is Required for Trait Objects
  - You can only make *object-safe* traits into trait objects
  - Some complex rules govern all the properties that make a trait object
  	safe, but in practice, only two rules are relevant


  - A trait is object safe if all the methods defined in the trait have
  	the following properties
	1. the return type isn't Self
	2. there are no generic type parameters

	

  - the Self keyword is an alias for the type we're implementing the traits
  	or methods on

  - trait objects must be object safe because once you've used a trait object,
  	Rust no longer knows the concrete type that's implementing that trait

  - if a trait method returns the concrete Self type, but a trait object
  	forgets the exact type that Self is, there is no way the method can
	use the original concrete type
	-- the same is true of generic type parameters that are filled in with
	   concrete type parameters when the trait is used:
	   * the concrete types become part of the type that implements the trait
	   * when the type is forgetten through the use of a trait object,
	   	 there is no way to know what types to fill in the generic
		 type parameters with


  - example: Clone trait is not object safe because it returns a type of Self
  	-- String::clone, Vec::clone, etc.

  - if we try to use a Clone trait with a trait object, the compiler will
  	throw a compiler error -> `Clone` cannot be made into an object
     

  
