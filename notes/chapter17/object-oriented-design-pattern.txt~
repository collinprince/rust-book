
Implementing an Object-Oriented Design Pattern
  - state pattern: an object-oriented design pattern
    -- crux of the pattern: a value has some internal state, which is represented by a set of state objects,
	   and the value's behavior changes based on the internal state

    -- the state objects share functionality: in Rust, of course, we use structs and traits rather
	   than objects and inheritance

    -- each state object is responsible for its own behavior and for governing when it should change
	   into another state

    -- the value that holds a state object knows nothing about the different behavior of the states
	   or when to transistion between states

  - using the state pattern means when the business requirements of the program change, we won't
  	need to change the code of the value holding the state or the code that uses the value
	-- we'll only need to update the code inside one of the state objects to change its rule or
	   perhaps add more state objects


  - example: we'll implement a blog post workflow in an incremental way. the blog's final functionality
  	will look like this:
	1. a blog post starts as an empty draft
	2. when the draft is done, a review of the post is requested
	3. when the post is approved, it gets published
	4. only published blog posts return content to print, so unapproved posts can't accidentally
	   be published

	-- any other changes attempted on a post should have no effect. for example, if we try to approve
	   a draft blog post before we've requested a review, the post should remain an unpublished draft

    -- example workflow:

         use blog::Post;
		 
	     fn main() {
		     let mut post = Post::new();

			 post.add_text("I ate a salad for lunch today.");
			 assert_eq!("", post.content());

			 post.request_review();
			 assert_eq!("", post.content());

			 post.approve();
			 assert_eq!("I ate a salad for lunch today", post.content());
		 }

  - notice that the only type we're interacting with from the crate is the Post type
  	-- this type will use the state pattern and will hold a value that will be one of three state objects
	   representing the various states a post can be in -- draft, waiting for review, or published
    -- changing from one state to another will be managed internally within the Post type
	-- the state changes in response to the methods called by our library's users on the Post instance,
	   but they don't have to manage the state changes directly
	-- users also can't make a mistake with the states, like publishing a post before it's reviewed



Trade-offs of the State Pattern
  - We've shown that Rust is capable of implementing the object-oriented state pattern to encapsulate
  	the different kinds of behavior a post should in each state
	-- the methods on Post know nothing about the various behaviors
	-- the way we organized the code, we have to look in only one place to know the different
	   ways a published post can behave: the implementation of the State trait on the Published struct


  - if we were to create an alternative implementation that didn't use the state pattern, we might
  	instead use match expressions in the methods on Post or even in the main code that checks
	the state of the post and changes behavior in those places
	-- that would mean we would have to look in several places to understand all the implications of a
	   post being in the published state
	-- this would only increase the more states we added: each of those match expressions would
	   need another arm

  - with the state pattern, the Post methods and the places we use Post don't need match expressions,
  	and to add a new state, we would only need to add a new struct and implement the trait methods on
	that one struct


  - the implementation using the stat pattern is easy to extend to add more functionality

  - to see how simple it is to maintain code that uses the state pattern, try a few of these suggestions:
  	-- add a reject method that changes the post's state from PendingReview back to Draft
	-- Require two calls to approve before the state can be changed to Published
	-- Allow users to add text content only when a post is in the Draft state. Hint: have the state
	   object responsible for what might change about the content but not responsible for modifying the
	   Post


  - one downside of the state pattern is that, because the states implement the transitions between states,
  	some of the states are coupled to each other.
	-- if we add another state between PendingReview and Published, such as Scheduled, we would have to change
	   the code in PendingReview to transition to Scheduled instead
	-- it would be less work if PendingReview didn't need to change with transition of a new state,
	   but that would mean switching to another design pattern


  - another downside is that we've duplicated some logic. To eliminate some of the duplication,
  	we might try to make default implementations for the request_review and approve methods on
	on the State trait that return self; however, this would violate object safety, because the trait
	doesn't know what the concrete self will be exactly
	-- we want to be able to use State as a trait object, so we need its methods to be object safe

  - another duplciation includes the similar implementations of the request_review and approve methods
  	on Post. Both methods delegate to the implementation of the same method on the value in the state field
	of Option and set the new value of the state field to the result. If we had a lot of methods on
	Post that followed this pattern, we might consider defining a macro to eliminate the repetition

  - by implementing the state pattern exactly as it's defined for object-oriented languages, we're
  	not taking as full advantage of Rust's strengths as we could

	   
