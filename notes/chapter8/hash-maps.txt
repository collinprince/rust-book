
Storing Keys with Associated Values in Hash Maps
  - HashMap<K, V>


Creating a New Hash Map
  - you can create an empty hash map with "new" and add elements with "insert"

  	example:

	  use std::collections::HashMap;

	  let mut scores = HashMap::new();

	  scores.insert(String::from("Blue"), 10);
	  scores.insert(String::from("Yellow"), 50);


  - note that we need to first use the HashMap from the collections portion of the standard library.
    -- of our three common collections, this one is the least often used, so it's not included in the features
	   brought into scope automatically in the prelude
	-- Hash maps also have less support from the standard library; there's no built-in macro to construct
	   them, for example


  - just like vectors, hash maps store their data on the heap
    -- the above HashMap has keys of type String and values of type i32

  - like vectors, hash maps are homegeneous:: all of the keys must have the same type, and all of
	the values must have the same type


  - another way of constructing a hash map is by using iterators and the collect method on a vector of
  	tuples, where each tuple consists of a key and its value
	-- the "collect" method gathers data in a number of collection types, including HashMap

	-- for example, if we had the team names and initial scores in two separate vectors, we could
	   use the "zip" method to create an iterator of tuples where "Blue" is paired with 10, and so forth.
	   Then we could use the "collect" method to turn that iterator of tuple sinto a hash map, as shown
	   below:

	     use std::collections::HashMap;

		 let teams = vec![String::from("Blue"), String::from("Yellow")];
		 let initial_scores = vec![10, 50];

		 let mut scores: HashMap<_, _> =
		 	 teams.into_iter().zip(initial_scores.into_iter()).collect();


    -- the HashMap<_,_> is needed above to specify that we want to collect the array of tuples (formed
	   by zipping up the two arrays) into a HashMap. We don't need to put specific types for the
	   HashMap as Rust can infer the types from the array types




Hash Maps and Ownership
  - For types that implement the Copy trait, like i32, the values are copied into the hash map
  
  - For owned values like String, the values will be moved and the hash map will be the owner of those values
  	example:
		use std::collections::HashMap;

		let field_name = String::from("Favorite color");
		let field_value = String::from("Blue");

		let mut map = HashMap::new();
		map.insert(field_name, field_value);

  - We aren't able to use the variables field_name and field_value after they've been moved into the hashmap
  	with the call to insert

  - if we insert references to values into the hash map, the values won't be moved into the hash map.
  	The values that the references point to must be valid for at least as long as the hash map is valid.


Accessing Values in a Hash Map
  - We can get a value of a hash map by providing its key to the get method, as shown below:

        use std::collections::HashMap;

		let mut scores = HashMap::new();

		scores.insert(String::from("Blue"), 10);
		scores.insert(String::from("Yellow"), 50);

		let team_name = String::from("Blue");
		let score = scores.get(&team_name);

  - above, score will have the value that's associated with the Blue team, and the result will be "Some(&10)"

  - the result is wrapped in Some because get returns an Option<&V>; if there's no value for that key in the
  	hash map, get will return None. The program will need to handle the Option in one of the ways that we
	covered in Chapter 6

  - We can iterate over each key/value pair in a hash map in a similar manner as we do with vectors, using
  	a for loop:

	    use std::collections::HashMap;

		let mut scores = HashMap::new();

		scores.insert(String::from("Blue"), 10);
		scores.insert(String::from("Yellow"), 50);

		for (key, value) in &scores {
		    println!("{}: {}", key, value);
		}
	   	  

    

	   
